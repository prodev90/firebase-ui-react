{"version":3,"sources":["../src/FirebaseAuth.jsx"],"names":["ELEMENT_ID","FirebaseAuth","props","uiConfig","firebaseAuth","elementId","componentDidMount","require","firebaseui","firebaseUiWidget","auth","AuthUI","getInstance","reset","start","componentWillUnmount","render","Component"],"mappings":";;;;AAiBA;;;;;;;;;;;;AAGA,IAAMA,aAAa,sBAAnB;;IAKqBC,Y;;;AAOnB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA,iDACjB,4BAAMA,KAAN,CADiB;;AAGjB,UAAKC,QAAL,GAAgBD,MAAMC,QAAtB;AACA,UAAKC,YAAL,GAAoBF,MAAME,YAA1B;AACA,UAAKC,SAAL,GAAiBH,MAAMG,SAAN,IAAmBL,UAApC;AALiB;AAMlB;;yBAKDM,iB,gCAAoB;AAElBC,YAAQ,gCAAR;;AAGA,QAAMC,aAAaD,QAAQ,YAAR,CAAnB;AACA,SAAKE,gBAAL,GAAwBD,WAAWE,IAAX,CAAgBC,MAAhB,CAAuBC,WAAvB,MACC,IAAIJ,WAAWE,IAAX,CAAgBC,MAApB,CAA2B,KAAKP,YAAhC,CADzB;AAEA,SAAKK,gBAAL,CAAsBI,KAAtB;AACA,SAAKJ,gBAAL,CAAsBK,KAAtB,CAA4B,MAAM,KAAKT,SAAvC,EAAkD,KAAKF,QAAvD;AACD,G;;yBAKDY,oB,mCAAuB;AACrB,SAAKN,gBAAL,CAAsBI,KAAtB;AACD,G;;yBAgBDG,M,qBAAS;AACP,WACE,uCAAK,IAAI,KAAKX,SAAd,GADF;AAGD,G;;;EAvDuC,gBAAMY,S;;kBAA3BhB,Y","file":"FirebaseAuth.js","sourcesContent":["/**\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// @flow\n\nimport React from 'react';\n\n// Global ID for the element.\nconst ELEMENT_ID = 'firebaseui_container';\n\n/**\n * React Component wrapper for the FirebaseUI Auth widget.\n */\nexport default class FirebaseAuth extends React.Component {\n  /**\n   * Constructor  Firebase Auth UI component\n   *\n   * @param {Object} props - Additional object properties.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n\n    this.uiConfig = props.uiConfig;\n    this.firebaseAuth = props.firebaseAuth;\n    this.elementId = props.elementId || ELEMENT_ID;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  componentDidMount() {\n    // Import the css only on the client.\n    require('firebaseui/dist/firebaseui.css');\n\n    // Firebase UI only works on the Client. So we're loading in `componentDidMount`.\n    const firebaseui = require('firebaseui');\n    this.firebaseUiWidget = firebaseui.auth.AuthUI.getInstance()\n                          || new firebaseui.auth.AuthUI(this.firebaseAuth);\n    this.firebaseUiWidget.reset();\n    this.firebaseUiWidget.start('#' + this.elementId, this.uiConfig);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  componentWillUnmount() {\n    this.firebaseUiWidget.reset();\n  }\n\n  /**\n   * Properties types.\n   */\n  props: {\n    uiConfig: Object, // The Firebase UI Web UI Config object.\n                      // See: https://github.com/firebase/firebaseui-web#configuration\n    firebaseAuth: Object, // The Firebase App auth instance to use.\n    elementId?: String // The ID of the underlying container that we'll generate.\n                       // Use this if you use more than one instance at a time in your app.\n  };\n\n  /**\n   * @inheritDoc\n   */\n  render() {\n    return (\n      <div id={this.elementId}/>\n    );\n  }\n}\n"]}